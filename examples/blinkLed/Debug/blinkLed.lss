
blinkLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c6c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000075f  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6d 00 	call	0xda	; 0xda <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD>:
	LCD('a');
	LCD('y');
	return 0;
}
void LCD(char ch) {
	DPORT = ch; //Put values to ports
  6c:	8b bb       	out	0x1b, r24	; 27
	CPORT = (1 << RS) | (1 << EN); //Signaling to send data
  6e:	80 ea       	ldi	r24, 0xA0	; 160
  70:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	85 e3       	ldi	r24, 0x35	; 53
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <LCD+0x8>
  78:	00 00       	nop
	_delay_us(10);
	CPORT = (1 << RS) | (0 << EN);
  7a:	80 e2       	ldi	r24, 0x20	; 32
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	80 ef       	ldi	r24, 0xF0	; 240
  80:	8a 95       	dec	r24
  82:	f1 f7       	brne	.-4      	; 0x80 <LCD+0x14>
	_delay_us(45);
}
  84:	08 95       	ret

00000086 <LCDcmd>:

void LCDcmd(char ch) {
	DPORT = ch;
  86:	8b bb       	out	0x1b, r24	; 27
	CPORT = (0 << RS) | (1 << EN); //Signaling to send commands
  88:	90 e8       	ldi	r25, 0x80	; 128
  8a:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	ef e3       	ldi	r30, 0x3F	; 63
  8e:	fc e9       	ldi	r31, 0x9C	; 156
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <LCDcmd+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <LCDcmd+0x10>
  96:	00 00       	nop
	_delay_ms(10);
	CPORT = (0 << RS) | (0 << EN);
  98:	15 ba       	out	0x15, r1	; 21
  9a:	2f e7       	ldi	r18, 0x7F	; 127
  9c:	32 e3       	ldi	r19, 0x32	; 50
  9e:	42 e0       	ldi	r20, 0x02	; 2
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <LCDcmd+0x1a>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCDcmd+0x24>
  aa:	00 00       	nop
	_delay_ms(45);
	if (ch == 0x01 || ch == 0x02) // If commands are LCD Clear or
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	30 f4       	brcc	.+12     	; 0xbe <LCDcmd+0x38>
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9f e1       	ldi	r25, 0x1F	; 31
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCDcmd+0x30>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCDcmd+0x36>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <LCDInitialize>:
	// LCDSeek00, delay 2mS
		_delay_ms(2);
}

void LCDInitialize(void) {
	LCDcmd(LCD8bit);
  c0:	88 e3       	ldi	r24, 0x38	; 56
  c2:	0e 94 43 00 	call	0x86	; 0x86 <LCDcmd>
	LCDcmd(LCDCursorOn);
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	0e 94 43 00 	call	0x86	; 0x86 <LCDcmd>
	LCDcmd(LCDClear);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 43 00 	call	0x86	; 0x86 <LCDcmd>
	LCDcmd(LCDSeek00);
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	0e 94 43 00 	call	0x86	; 0x86 <LCDcmd>
}
  d8:	08 95       	ret

000000da <main>:
void LCD(char ch);
void LCDcmd(char ch);
void LCDInitialize(void);

int main() {
	DPDDR = 0xff;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a bb       	out	0x1a, r24	; 26
	CPDDR = 0xf0;
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	84 bb       	out	0x14, r24	; 20
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	97 ea       	ldi	r25, 0xA7	; 167
  e6:	a1 e6       	ldi	r26, 0x61	; 97
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0xe>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x18>
  f2:	00 00       	nop

	_delay_ms(2000);

	LCDInitialize();
  f4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCDInitialize>
	LCD('C');
  f8:	83 e4       	ldi	r24, 0x43	; 67
  fa:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('i');
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('r');
 104:	82 e7       	ldi	r24, 0x72	; 114
 106:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('c');
 10a:	83 e6       	ldi	r24, 0x63	; 99
 10c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('u');
 110:	85 e7       	ldi	r24, 0x75	; 117
 112:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('i');
 116:	89 e6       	ldi	r24, 0x69	; 105
 118:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('t');
 11c:	84 e7       	ldi	r24, 0x74	; 116
 11e:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('s');
 122:	83 e7       	ldi	r24, 0x73	; 115
 124:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD(' ');
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('T');
 12e:	84 e5       	ldi	r24, 0x54	; 84
 130:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('o');
 134:	8f e6       	ldi	r24, 0x6F	; 111
 136:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('d');
 13a:	84 e6       	ldi	r24, 0x64	; 100
 13c:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('a');
 140:	81 e6       	ldi	r24, 0x61	; 97
 142:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	LCD('y');
 146:	89 e7       	ldi	r24, 0x79	; 121
 148:	0e 94 36 00 	call	0x6c	; 0x6c <LCD>
	return 0;
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
